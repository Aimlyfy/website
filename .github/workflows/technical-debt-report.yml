name: Technical Debt Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  technical-debt-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for better analysis
    
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
    
    - name: Authenticate GitHub CLI
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    
    - name: Install GitHub Copilot CLI extension
      run: |
        gh extension install github/gh-copilot
    
    - name: Create HTML Report Template
      run: |
        mkdir -p docs

    - name: Generate Technical Debt Analysis
      run: |
        # Generate comprehensive technical debt analysis
        echo "Generating overall analysis..."
        OVERALL_ANALYSIS=$(gh copilot explain "Analyze this entire React TypeScript codebase for technical debt. Provide a comprehensive report that includes: 1) Overall technical debt grade from A (excellent) to E (critical issues), 2) Code quality assessment, 3) Architecture analysis, 4) Security concerns, 5) Performance issues, 6) Maintainability problems, 7) Specific recommendations for improvement. Focus on identifying code smells, outdated patterns, missing error handling, inefficient algorithms, and architectural issues. Format as HTML paragraphs and lists." 2>/dev/null || echo "Failed to generate overall analysis")
        
        echo "Generating component analysis..."
        COMPONENT_ANALYSIS=$(gh copilot explain "Analyze the React component architecture in src/components/ for technical debt issues including: component complexity, reusability, prop drilling, state management patterns, and adherence to React best practices. Suggest specific refactoring opportunities. Format as HTML paragraphs and lists." 2>/dev/null || echo "Failed to generate component analysis")
        
        echo "Generating code quality analysis..."
        CODE_QUALITY=$(gh copilot explain "Evaluate code quality metrics for this React TypeScript project including: cyclomatic complexity, code duplication, naming conventions, file organization, import/export patterns, and TypeScript usage effectiveness. Identify areas needing immediate attention. Format as HTML paragraphs and lists." 2>/dev/null || echo "Failed to generate code quality analysis")
        
        echo "Generating security and performance analysis..."
        SECURITY_PERFORMANCE=$(gh copilot explain "Conduct a security and performance review of this React application, identifying potential vulnerabilities, performance bottlenecks, bundle size issues, and optimization opportunities. Include specific recommendations for improving security and performance. Format as HTML paragraphs and lists." 2>/dev/null || echo "Failed to generate security analysis")
        
        echo "Generating recommendations..."
        RECOMMENDATIONS=$(gh copilot explain "Based on the technical debt analysis of this React TypeScript codebase, provide a prioritized action plan with specific, actionable recommendations. Include: 1) Critical issues that need immediate attention, 2) Medium priority improvements, 3) Long-term architectural improvements, 4) Estimated effort levels, 5) Dependencies between tasks. Format as HTML ordered lists with priority levels." 2>/dev/null || echo "Failed to generate recommendations")
        
        # Extract grade from overall analysis (look for grade patterns)
        GRADE=$(echo "$OVERALL_ANALYSIS" | grep -oiE "(grade|rating|score).{0,20}[A-E]" | grep -oE "[A-E]" | head -1)
        if [ -z "$GRADE" ]; then
            GRADE="C"  # Default grade if not found
        fi
        GRADE_LOWER=$(echo "$GRADE" | tr '[:upper:]' '[:lower:]')
        
        # Replace placeholders in HTML template with proper escaping
        perl -i -pe "s|GENERATION_DATE|$(date)|g" docs/index.html
        perl -i -pe "s|REPOSITORY_NAME|${{ github.repository }}|g" docs/index.html
        perl -i -pe "s|COMMIT_SHA|${{ github.sha }}|g" docs/index.html
        perl -i -pe "s|WORKFLOW_RUN|${{ github.run_id }}|g" docs/index.html
        perl -i -pe "s|OVERALL_GRADE|$GRADE_LOWER|g" docs/index.html
        perl -i -pe "s|OVERALL_GRADE_VALUE|Grade $GRADE|g" docs/index.html
        
        # Process and escape content using perl
        echo "$OVERALL_ANALYSIS" | perl -pe 's/\n/<br>/g' > temp_overall.txt
        echo "$COMPONENT_ANALYSIS" | perl -pe 's/\n/<br>/g' > temp_component.txt
        echo "$CODE_QUALITY" | perl -pe 's/\n/<br>/g' > temp_quality.txt
        echo "$SECURITY_PERFORMANCE" | perl -pe 's/\n/<br>/g' > temp_security.txt
        echo "$RECOMMENDATIONS" | perl -pe 's/\n/<br>/g' > temp_recommendations.txt
        
        # Replace content placeholders
        perl -i -pe 's|OVERALL_ANALYSIS_CONTENT|'"$(cat temp_overall.txt)"'|g' docs/index.html
        perl -i -pe 's|COMPONENT_ANALYSIS_CONTENT|'"$(cat temp_component.txt)"'|g' docs/index.html
        perl -i -pe 's|CODE_QUALITY_CONTENT|'"$(cat temp_quality.txt)"'|g' docs/index.html
        perl -i -pe 's|SECURITY_PERFORMANCE_CONTENT|'"$(cat temp_security.txt)"'|g' docs/index.html
        perl -i -pe 's|RECOMMENDATIONS_CONTENT|'"$(cat temp_recommendations.txt)"'|g' docs/index.html
        
        # Cleanup temporary files
        rm temp_*.txt
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/index.html
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Comment on PR with Report Link
      if: github.event_name == 'pull_request'
      run: |
        echo "## ðŸ“Š Technical Debt Report Generated" > pr-comment.md
        echo "" >> pr-comment.md
        echo "A comprehensive technical debt analysis has been generated for this PR." >> pr-comment.md
        echo "" >> pr-comment.md
        echo "ðŸ”— **[View Interactive Report](${{ steps.deployment.outputs.page_url }})**" >> pr-comment.md
        echo "" >> pr-comment.md
        echo "### Quick Summary:" >> pr-comment.md
        GRADE=$(grep -o "Grade [A-E]" docs/index.html | head -1 || echo "Grade C")
        echo "- **Overall Grade:** $GRADE" >> pr-comment.md
        echo "- **Generated:** $(date)" >> pr-comment.md
        echo "- **Commit:** \`${{ github.sha }}\`" >> pr-comment.md
        echo "" >> pr-comment.md
        echo "The report includes detailed analysis of code quality, architecture, security, and performance with actionable recommendations." >> pr-comment.md
        
        gh pr comment ${{ github.event.pull_request.number }} --body-file pr-comment.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Issue for Weekly Report
      if: github.event_name == 'schedule'
      run: |
        echo "## ðŸš¨ Weekly Technical Debt Report" > issue-body.md
        echo "" >> issue-body.md
        echo "The automated weekly technical debt analysis has been completed and published." >> issue-body.md
        echo "" >> issue-body.md
        echo "ðŸ”— **[View Interactive Report](${{ steps.deployment.outputs.page_url }})**" >> issue-body.md
        echo "" >> issue-body.md
        GRADE=$(grep -o "Grade [A-E]" docs/index.html | head -1 || echo "Grade C")
        echo "### Summary:" >> issue-body.md
        echo "- **Overall Grade:** $GRADE" >> issue-body.md
        echo "- **Generated:** $(date)" >> issue-body.md
        echo "- **Commit:** \`${{ github.sha }}\`" >> issue-body.md
        echo "" >> issue-body.md
        echo "### Action Items:" >> issue-body.md
        echo "- [ ] Review the comprehensive technical debt report" >> issue-body.md
        echo "- [ ] Prioritize critical and high-priority issues" >> issue-body.md
        echo "- [ ] Schedule refactoring tasks for next sprint" >> issue-body.md
        echo "- [ ] Address security and performance concerns" >> issue-body.md
        echo "- [ ] Update coding standards based on recommendations" >> issue-body.md
        echo "" >> issue-body.md
        echo "The report includes detailed analysis of:" >> issue-body.md
        echo "- Code quality metrics and architecture" >> issue-body.md
        echo "- Security vulnerabilities and performance issues" >> issue-body.md
        echo "- Specific recommendations with priority levels" >> issue-body.md
        echo "- Actionable improvement strategies" >> issue-body.md
        
        gh issue create --title "ðŸ”§ Weekly Technical Debt Report - $(date +'%Y-%m-%d')" --body-file issue-body.md --label "technical-debt,maintenance,weekly-report"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}